/* tslint:disable */
/* eslint-disable */
/**
 * Insurer
 * Insurer API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface ApiV1ContractsGetRequest
 */
export interface ApiV1ContractsGetRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1ContractsGetRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ApiV1ContractsGetRequest
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof ApiV1ContractsGetRequest
   */
  customerId: number
  /**
   *
   * @type {number}
   * @memberof ApiV1ContractsGetRequest
   */
  productId?: number
  /**
   *
   * @type {string}
   * @memberof ApiV1ContractsGetRequest
   */
  startDate: string
  /**
   *
   * @type {string}
   * @memberof ApiV1ContractsGetRequest
   */
  claimDate?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1ContractsGetRequest
   */
  endDate?: string
}
/**
 *
 * @export
 * @interface ApiV1CustomersGetRequest
 */
export interface ApiV1CustomersGetRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersGetRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersGetRequest
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersGetRequest
   */
  phone: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersGetRequest
   */
  address?: string
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersGetRequest
   */
  emailNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersGetRequest
   */
  smsNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersGetRequest
   */
  kakaoNotification?: boolean
}
/**
 *
 * @export
 * @interface ApiV1CustomersIdDelete200Response
 */
export interface ApiV1CustomersIdDelete200Response {
  /**
   *
   * @type {ApiV1CustomersIdDelete200ResponseSchema}
   * @memberof ApiV1CustomersIdDelete200Response
   */
  schema?: ApiV1CustomersIdDelete200ResponseSchema
}
/**
 *
 * @export
 * @interface ApiV1CustomersIdDelete200ResponseSchema
 */
export interface ApiV1CustomersIdDelete200ResponseSchema {
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersIdDelete200ResponseSchema
   */
  message?: string
}
/**
 *
 * @export
 * @interface ApiV1CustomersIdDeleteRequest
 */
export interface ApiV1CustomersIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  phone?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  address?: string
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  emailNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  smsNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1CustomersIdDeleteRequest
   */
  kakaoNotification?: boolean
}
/**
 *
 * @export
 * @interface ApiV1NotificationsEmailPost200Response
 */
export interface ApiV1NotificationsEmailPost200Response {
  /**
   *
   * @type {ApiV1NotificationsEmailPost200ResponseSchema}
   * @memberof ApiV1NotificationsEmailPost200Response
   */
  schema?: ApiV1NotificationsEmailPost200ResponseSchema
}
/**
 *
 * @export
 * @interface ApiV1NotificationsEmailPost200ResponseSchema
 */
export interface ApiV1NotificationsEmailPost200ResponseSchema {
  /**
   *
   * @type {boolean}
   * @memberof ApiV1NotificationsEmailPost200ResponseSchema
   */
  success?: boolean
  /**
   *
   * @type {string}
   * @memberof ApiV1NotificationsEmailPost200ResponseSchema
   */
  message?: string
}
/**
 *
 * @export
 * @interface ApiV1NotificationsEmailPostRequest
 */
export interface ApiV1NotificationsEmailPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1NotificationsEmailPostRequest
   */
  to: string
  /**
   *
   * @type {string}
   * @memberof ApiV1NotificationsEmailPostRequest
   */
  subject: string
  /**
   *
   * @type {string}
   * @memberof ApiV1NotificationsEmailPostRequest
   */
  contractStartDate: string
  /**
   *
   * @type {string}
   * @memberof ApiV1NotificationsEmailPostRequest
   */
  customerName: string
}
/**
 *
 * @export
 * @interface ApiV1ProductsGetRequest
 */
export interface ApiV1ProductsGetRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1ProductsGetRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ApiV1ProductsGetRequest
   */
  description: string
}
/**
 *
 * @export
 * @interface ApiV1ProductsIdDeleteRequest
 */
export interface ApiV1ProductsIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1ProductsIdDeleteRequest
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1ProductsIdDeleteRequest
   */
  description?: string
}
/**
 *
 * @export
 * @interface ApiV1UsersLoginPost200Response
 */
export interface ApiV1UsersLoginPost200Response {
  /**
   *
   * @type {ApiV1UsersLoginPost200ResponseSchema}
   * @memberof ApiV1UsersLoginPost200Response
   */
  schema?: ApiV1UsersLoginPost200ResponseSchema
}
/**
 *
 * @export
 * @interface ApiV1UsersLoginPost200ResponseSchema
 */
export interface ApiV1UsersLoginPost200ResponseSchema {
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersLoginPost200ResponseSchema
   */
  token?: string
}
/**
 *
 * @export
 * @interface ApiV1UsersLoginPostRequest
 */
export interface ApiV1UsersLoginPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersLoginPostRequest
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersLoginPostRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface ApiV1UsersRegisterPostRequest
 */
export interface ApiV1UsersRegisterPostRequest {
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  email: string
  /**
   *
   * @type {boolean}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  emailNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  smsNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof ApiV1UsersRegisterPostRequest
   */
  kakaoNotification?: boolean
}
/**
 *
 * @export
 * @interface Contract
 */
export interface Contract {
  /**
   *
   * @type {number}
   * @memberof Contract
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Contract
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof Contract
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof Contract
   */
  customerId?: number
  /**
   *
   * @type {number}
   * @memberof Contract
   */
  productId?: number
  /**
   *
   * @type {string}
   * @memberof Contract
   */
  startDate?: string
  /**
   *
   * @type {string}
   * @memberof Contract
   */
  claimDate?: string
  /**
   *
   * @type {string}
   * @memberof Contract
   */
  endDate?: string
}
/**
 *
 * @export
 * @interface ContractWithCustomer
 */
export interface ContractWithCustomer {
  /**
   *
   * @type {number}
   * @memberof ContractWithCustomer
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof ContractWithCustomer
   */
  customerId?: number
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  customerName?: string
  /**
   *
   * @type {number}
   * @memberof ContractWithCustomer
   */
  productId?: number
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  startDate?: string
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  claimDate?: string
  /**
   *
   * @type {string}
   * @memberof ContractWithCustomer
   */
  endDate?: string
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
  /**
   *
   * @type {number}
   * @memberof Customer
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  phone?: string
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  address?: string
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  emailNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  smsNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof Customer
   */
  kakaoNotification?: boolean
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {string}
   * @memberof ModelError
   */
  message?: string
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
  /**
   *
   * @type {number}
   * @memberof Product
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Product
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof Product
   */
  description?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  emailNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  smsNotification?: boolean
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  kakaoNotification?: boolean
}

/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * list all contracts
     * @summary list all contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/contracts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * list a contract by id
     * @summary list a contract by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsIdGet: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ContractsIdGet', 'id', id)
      const localVarPath = `/api/v1/contracts/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * create a contract
     * @summary create a contract
     * @param {ApiV1ContractsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsPost: async (
      body?: ApiV1ContractsGetRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/contracts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
  return {
    /**
     * list all contracts
     * @summary list all contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ContractsGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ContractWithCustomer>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ContractsGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * list a contract by id
     * @summary list a contract by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ContractsIdGet(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContractWithCustomer>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ContractsIdGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * create a contract
     * @summary create a contract
     * @param {ApiV1ContractsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ContractsPost(
      body?: ApiV1ContractsGetRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contract>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ContractsPost(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContractsApiFp(configuration)
  return {
    /**
     * list all contracts
     * @summary list all contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsGet(
      options?: any
    ): AxiosPromise<Array<ContractWithCustomer>> {
      return localVarFp
        .apiV1ContractsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * list a contract by id
     * @summary list a contract by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsIdGet(
      id: number,
      options?: any
    ): AxiosPromise<ContractWithCustomer> {
      return localVarFp
        .apiV1ContractsIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * create a contract
     * @summary create a contract
     * @param {ApiV1ContractsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ContractsPost(
      body?: ApiV1ContractsGetRequest,
      options?: any
    ): AxiosPromise<Contract> {
      return localVarFp
        .apiV1ContractsPost(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
  /**
   * list all contracts
   * @summary list all contracts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractsApi
   */
  public apiV1ContractsGet(options?: AxiosRequestConfig) {
    return ContractsApiFp(this.configuration)
      .apiV1ContractsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * list a contract by id
   * @summary list a contract by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractsApi
   */
  public apiV1ContractsIdGet(id: number, options?: AxiosRequestConfig) {
    return ContractsApiFp(this.configuration)
      .apiV1ContractsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * create a contract
   * @summary create a contract
   * @param {ApiV1ContractsGetRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractsApi
   */
  public apiV1ContractsPost(
    body?: ApiV1ContractsGetRequest,
    options?: AxiosRequestConfig
  ) {
    return ContractsApiFp(this.configuration)
      .apiV1ContractsPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * list all customers
     * @summary list all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/customers/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete a customer by id
     * @summary delete a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdDelete: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1CustomersIdDelete', 'id', id)
      const localVarPath = `/api/v1/customers/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get a customer by id
     * @summary get a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdGet: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1CustomersIdGet', 'id', id)
      const localVarPath = `/api/v1/customers/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update a customer by id
     * @summary update a customer by id
     * @param {number} id
     * @param {ApiV1CustomersIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdPut: async (
      id: number,
      body?: ApiV1CustomersIdDeleteRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1CustomersIdPut', 'id', id)
      const localVarPath = `/api/v1/customers/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * create a customer
     * @summary create a customer
     * @param {ApiV1CustomersGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersPost: async (
      body?: ApiV1CustomersGetRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/customers/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
  return {
    /**
     * list all customers
     * @summary list all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CustomersGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Customer>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CustomersGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete a customer by id
     * @summary delete a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CustomersIdDelete(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiV1CustomersIdDelete200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CustomersIdDelete(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * get a customer by id
     * @summary get a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CustomersIdGet(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CustomersIdGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update a customer by id
     * @summary update a customer by id
     * @param {number} id
     * @param {ApiV1CustomersIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CustomersIdPut(
      id: number,
      body?: ApiV1CustomersIdDeleteRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CustomersIdPut(id, body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * create a customer
     * @summary create a customer
     * @param {ApiV1CustomersGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CustomersPost(
      body?: ApiV1CustomersGetRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CustomersPost(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CustomersApiFp(configuration)
  return {
    /**
     * list all customers
     * @summary list all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersGet(options?: any): AxiosPromise<Array<Customer>> {
      return localVarFp
        .apiV1CustomersGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete a customer by id
     * @summary delete a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdDelete(
      id: number,
      options?: any
    ): AxiosPromise<ApiV1CustomersIdDelete200Response> {
      return localVarFp
        .apiV1CustomersIdDelete(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * get a customer by id
     * @summary get a customer by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdGet(id: number, options?: any): AxiosPromise<Customer> {
      return localVarFp
        .apiV1CustomersIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * update a customer by id
     * @summary update a customer by id
     * @param {number} id
     * @param {ApiV1CustomersIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersIdPut(
      id: number,
      body?: ApiV1CustomersIdDeleteRequest,
      options?: any
    ): AxiosPromise<Customer> {
      return localVarFp
        .apiV1CustomersIdPut(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * create a customer
     * @summary create a customer
     * @param {ApiV1CustomersGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CustomersPost(
      body?: ApiV1CustomersGetRequest,
      options?: any
    ): AxiosPromise<Customer> {
      return localVarFp
        .apiV1CustomersPost(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
  /**
   * list all customers
   * @summary list all customers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public apiV1CustomersGet(options?: AxiosRequestConfig) {
    return CustomersApiFp(this.configuration)
      .apiV1CustomersGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete a customer by id
   * @summary delete a customer by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public apiV1CustomersIdDelete(id: number, options?: AxiosRequestConfig) {
    return CustomersApiFp(this.configuration)
      .apiV1CustomersIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * get a customer by id
   * @summary get a customer by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public apiV1CustomersIdGet(id: number, options?: AxiosRequestConfig) {
    return CustomersApiFp(this.configuration)
      .apiV1CustomersIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update a customer by id
   * @summary update a customer by id
   * @param {number} id
   * @param {ApiV1CustomersIdDeleteRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public apiV1CustomersIdPut(
    id: number,
    body?: ApiV1CustomersIdDeleteRequest,
    options?: AxiosRequestConfig
  ) {
    return CustomersApiFp(this.configuration)
      .apiV1CustomersIdPut(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * create a customer
   * @summary create a customer
   * @param {ApiV1CustomersGetRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public apiV1CustomersPost(
    body?: ApiV1CustomersGetRequest,
    options?: AxiosRequestConfig
  ) {
    return CustomersApiFp(this.configuration)
      .apiV1CustomersPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/health`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .healthGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * send an email notification
     * @summary send an email notification
     * @param {ApiV1NotificationsEmailPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NotificationsEmailPost: async (
      body?: ApiV1NotificationsEmailPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/notifications/email`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    NotificationsApiAxiosParamCreator(configuration)
  return {
    /**
     * send an email notification
     * @summary send an email notification
     * @param {ApiV1NotificationsEmailPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1NotificationsEmailPost(
      body?: ApiV1NotificationsEmailPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiV1NotificationsEmailPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1NotificationsEmailPost(
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = NotificationsApiFp(configuration)
  return {
    /**
     * send an email notification
     * @summary send an email notification
     * @param {ApiV1NotificationsEmailPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1NotificationsEmailPost(
      body?: ApiV1NotificationsEmailPostRequest,
      options?: any
    ): AxiosPromise<ApiV1NotificationsEmailPost200Response> {
      return localVarFp
        .apiV1NotificationsEmailPost(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
  /**
   * send an email notification
   * @summary send an email notification
   * @param {ApiV1NotificationsEmailPostRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NotificationsApi
   */
  public apiV1NotificationsEmailPost(
    body?: ApiV1NotificationsEmailPostRequest,
    options?: AxiosRequestConfig
  ) {
    return NotificationsApiFp(this.configuration)
      .apiV1NotificationsEmailPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * list all products
     * @summary list all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/products/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete a product by id
     * @summary delete a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdDelete: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ProductsIdDelete', 'id', id)
      const localVarPath = `/api/v1/products/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get a product by id
     * @summary get a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdGet: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ProductsIdGet', 'id', id)
      const localVarPath = `/api/v1/products/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update a product by id
     * @summary update a product by id
     * @param {number} id
     * @param {ApiV1ProductsIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdPut: async (
      id: number,
      body?: ApiV1ProductsIdDeleteRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ProductsIdPut', 'id', id)
      const localVarPath = `/api/v1/products/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * create a product
     * @summary create a product
     * @param {ApiV1ProductsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsPost: async (
      body?: ApiV1ProductsGetRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/products/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
  return {
    /**
     * list all products
     * @summary list all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete a product by id
     * @summary delete a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdDelete(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiV1CustomersIdDelete200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdDelete(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * get a product by id
     * @summary get a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdGet(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update a product by id
     * @summary update a product by id
     * @param {number} id
     * @param {ApiV1ProductsIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdPut(
      id: number,
      body?: ApiV1ProductsIdDeleteRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdPut(id, body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * create a product
     * @summary create a product
     * @param {ApiV1ProductsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsPost(
      body?: ApiV1ProductsGetRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsPost(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProductsApiFp(configuration)
  return {
    /**
     * list all products
     * @summary list all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsGet(options?: any): AxiosPromise<Array<Product>> {
      return localVarFp
        .apiV1ProductsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete a product by id
     * @summary delete a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdDelete(
      id: number,
      options?: any
    ): AxiosPromise<ApiV1CustomersIdDelete200Response> {
      return localVarFp
        .apiV1ProductsIdDelete(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * get a product by id
     * @summary get a product by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdGet(id: number, options?: any): AxiosPromise<Product> {
      return localVarFp
        .apiV1ProductsIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * update a product by id
     * @summary update a product by id
     * @param {number} id
     * @param {ApiV1ProductsIdDeleteRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdPut(
      id: number,
      body?: ApiV1ProductsIdDeleteRequest,
      options?: any
    ): AxiosPromise<Product> {
      return localVarFp
        .apiV1ProductsIdPut(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * create a product
     * @summary create a product
     * @param {ApiV1ProductsGetRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsPost(
      body?: ApiV1ProductsGetRequest,
      options?: any
    ): AxiosPromise<Product> {
      return localVarFp
        .apiV1ProductsPost(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
  /**
   * list all products
   * @summary list all products
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public apiV1ProductsGet(options?: AxiosRequestConfig) {
    return ProductsApiFp(this.configuration)
      .apiV1ProductsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete a product by id
   * @summary delete a product by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public apiV1ProductsIdDelete(id: number, options?: AxiosRequestConfig) {
    return ProductsApiFp(this.configuration)
      .apiV1ProductsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * get a product by id
   * @summary get a product by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public apiV1ProductsIdGet(id: number, options?: AxiosRequestConfig) {
    return ProductsApiFp(this.configuration)
      .apiV1ProductsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update a product by id
   * @summary update a product by id
   * @param {number} id
   * @param {ApiV1ProductsIdDeleteRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public apiV1ProductsIdPut(
    id: number,
    body?: ApiV1ProductsIdDeleteRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .apiV1ProductsIdPut(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * create a product
   * @summary create a product
   * @param {ApiV1ProductsGetRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductsApi
   */
  public apiV1ProductsPost(
    body?: ApiV1ProductsGetRequest,
    options?: AxiosRequestConfig
  ) {
    return ProductsApiFp(this.configuration)
      .apiV1ProductsPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * login
     * @summary login
     * @param {ApiV1UsersLoginPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersLoginPost: async (
      body?: ApiV1UsersLoginPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * logout
     * @summary logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersLogoutPost: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/logout`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * get profile
     * @summary get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersMeGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * register new user
     * @summary register new user
     * @param {ApiV1UsersRegisterPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersRegisterPost: async (
      body?: ApiV1UsersRegisterPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     * login
     * @summary login
     * @param {ApiV1UsersLoginPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersLoginPost(
      body?: ApiV1UsersLoginPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiV1UsersLoginPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersLoginPost(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * logout
     * @summary logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersLogoutPost(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiV1CustomersIdDelete200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersLogoutPost(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * get profile
     * @summary get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersMeGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersMeGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * register new user
     * @summary register new user
     * @param {ApiV1UsersRegisterPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersRegisterPost(
      body?: ApiV1UsersRegisterPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersRegisterPost(body, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     * login
     * @summary login
     * @param {ApiV1UsersLoginPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersLoginPost(
      body?: ApiV1UsersLoginPostRequest,
      options?: any
    ): AxiosPromise<ApiV1UsersLoginPost200Response> {
      return localVarFp
        .apiV1UsersLoginPost(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * logout
     * @summary logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersLogoutPost(
      options?: any
    ): AxiosPromise<ApiV1CustomersIdDelete200Response> {
      return localVarFp
        .apiV1UsersLogoutPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * get profile
     * @summary get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersMeGet(options?: any): AxiosPromise<User> {
      return localVarFp
        .apiV1UsersMeGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * register new user
     * @summary register new user
     * @param {ApiV1UsersRegisterPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersRegisterPost(
      body?: ApiV1UsersRegisterPostRequest,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .apiV1UsersRegisterPost(body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * login
   * @summary login
   * @param {ApiV1UsersLoginPostRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersLoginPost(
    body?: ApiV1UsersLoginPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .apiV1UsersLoginPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * logout
   * @summary logout
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersLogoutPost(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersLogoutPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * get profile
   * @summary get profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersMeGet(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiV1UsersMeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * register new user
   * @summary register new user
   * @param {ApiV1UsersRegisterPostRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiV1UsersRegisterPost(
    body?: ApiV1UsersRegisterPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .apiV1UsersRegisterPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
